using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Text.RegularExpressions;
using MeiNianWebRef;
using System.Web.Script.Serialization;
using Subgurim.Controles;
using System.IO;
using System.Xml;
using Com.Alipay;
using System.Collections;
using ikang;

public partial class reserveBindexam : PageBases
{
    Model.tab_customers modelCu = new Model.tab_customers();
    Model.tab_orders orders = new Model.tab_orders();
    Bll.CustomerBll Cb = new Bll.CustomerBll();
    Bll.SupplierBll sb = new Bll.SupplierBll();
    Bll.packageBll pb = new Bll.packageBll();
    Bll.uppkgBll ub = new Bll.uppkgBll();
    Bll.OrdersBll ob = new Bll.OrdersBll();
    Bll.examcardBll eb = new Bll.examcardBll();
    Bll.companyBll comb = new Bll.companyBll();
    Model.tab_company modelcomp = new Model.tab_company();
    Bll.supplierpackageBll spb = new Bll.supplierpackageBll();

    Bll.deliveryaddressBll db = new Bll.deliveryaddressBll();
    GMap GMap1 = new GMap();

    reserveexamcommon rc = new reserveexamcommon();

    PublicClass pc = new PublicClass();
    ikangservice iks = new ikangservice();
    ikangmember ikm = new ikangmember();
    HealthService mns = new HealthService();

    DateTime firstdate;
    DateTime lastdate;
    string DOB;
    
    public string supplierlistcontentikang, supplierlistcontentciming, supplierlistcontentmeinian;
    int uppkgcount = -1;
    public string continue1class = "";
    public string hideik = "", hidemn = "";
    public int limit1, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10;
    public string supplierpackagecode = "";
    protected void Page_Load(object sender, EventArgs e)
    {
        string s = "";
        if (!Page.IsPostBack)
        {
          //  this.CheckUser((Hashtable)Application["Online"]);
        }
        //return;
     

        modelCu.customerID = int.Parse(Session["id"].ToString());
        modelCu = Cb.getCustomer(modelCu);
        if (!Page.IsPostBack)
        {
            s = MediPlus.reserve.s1_1CanCusRsr(modelCu);
            if (s != "success")
            {
                if (s.Contains("有未完成订单"))
                {
                    Page.ClientScript.RegisterClientScriptBlock(Page.GetType(), "message", " <script>alert('有未完成订单！将前往订单列表页。'); window.location.href = 'viewreservation.aspx';</script>");
                }
                else
                {
                    Page.ClientScript.RegisterClientScriptBlock(Page.GetType(), "message", " <script> window.location.href = 'fillinfo.aspx?t=reserveBindxam';</script>");
                    Response.Write(s);
                    return;
                }
                return;
            }

            init();
        }
    }
    void clearlist()
    {
        for (int i = 0; i < RadioButtonList2.Items.Count; i++)
        {
            if (RadioButtonList2.Items[i].Text == "")
            {
                RadioButtonList2.Items[i].Attributes.Add("class", "hidden");
            }
        }
    }
    void init()
    {
        rc.initprovincecitydropdown(false, modelCu, com_Province, com_City);
        rc.fillbindsupplier(modelCu, RadioButtonList2, com_Province, com_City);
    }
    private void fillbranchexam(string id)
    {
        string validdate = "";
        this.DropDownList4.Items.Clear();
        string s = "select type,supplier,branch,hospid,note,city from tab_suppliers where id='" + id+ "'";
        DataTable dt = sb.GetAny(s);
        //this.Label44.Text = dt.Rows[0]["city"].ToString();
        this.Label48.Text = dt.Rows[0]["supplier"].ToString() + " " + dt.Rows[0]["branch"].ToString();
        ViewState["branchtype"] = dt.Rows[0]["type"].ToString().Substring(0, 2);
        ViewState["hospid"] = dt.Rows[0]["hospid"].ToString();
        if (ViewState["branchtype"].ToString() == "网络")
        {
            if ( false)
            {
                validdate = rc.getvaliddate(dt.Rows[0]["supplier"].ToString(), dt.Rows[0]["hospid"].ToString());
                //getvaliddate(dt.Rows[0]["supplier"].ToString(), dt.Rows[0]["hospid"].ToString());
            }
        }

        rc.fillavailbedate(dt.Rows[0]["supplier"].ToString(), dt.Rows[0]["note"].ToString(), validdate, this.DropDownList4, modelCu.customerCompany);


    }

    protected void RadioButtonList2_SelectedIndexChanged(object sender, EventArgs e)
    {
        fillbranchexam(RadioButtonList2.SelectedValue);
        clearlist();
    }
    protected void Button4_Click(object sender, EventArgs e)  //选择好后去确认信息
    {
        continue1class = "hidden";
        this.Panel6.Visible = true;
        ordercontinueinfo();
    }
    void ordercontinueinfo()
    {
        //个人信息
        Label23.Text = modelCu.customerName;
        Label24.Text = modelCu.customerGender;
        Label26.Text = (DateTime.Now.Year - modelCu.customerDOB.Year).ToString();
        Label28.Text = modelCu.customerIDcard;
        Label30.Text = modelCu.customerMobile;
        Label32.Text = modelCu.customerPrivateEmail;
        Label38.Text = modelCu.customerMarriageStatus;
        Label40.Text = modelCu.customerAddress;
        //预约信息
        Label42.Text = DropDownList4.SelectedValue;
        for (int i = 0; i < this.RadioButtonList2.Items.Count; i++)
        {
            if(RadioButtonList2.Items[i].Selected)
            {
                this.Label48.Text = RadioButtonList2.Items[i].Text;
            }
        }
    }
    protected void Button2_Click(object sender, EventArgs e)  //返回
    {
        continue1class = "";
        this.Panel6.Visible = false;
        init();
    }
    protected void Button7_Click(object sender, EventArgs e)   //提交订单
    {
        try
        {
            int ordernum;
            ordernum = saveorder();
            if (ordernum == 9999)
            {
                Page.ClientScript.RegisterStartupScript(Page.GetType(), "message", "<script language='javascript' defer>alert('已有一个订单！');</script>");
                return;
            }

            //savepersonalinfo();/

            Bll.messageBll mb = new Bll.messageBll();
            mb.sendmsg(1004, modelCu, orders);
            if (modelCu.packagecode == "入职体检")
            {
                Page.ClientScript.RegisterClientScriptBlock(Page.GetType(), "message", " <script>alert('订单已提交，等待客服处理！'); window.location.href = 'viewreservation.aspx';</script>");
            }
            else
            {
                Response.Redirect("ordersubmitted.aspx?ordnum=" + ordernum, true);
            }
        }
        catch (Exception ex)
        {
            Page.ClientScript.RegisterClientScriptBlock(Page.GetType(), "message", " <script>alert('订单已提交，等待客服处理！'); window.location.href = 'viewreservation.aspx';</script>");
        }
    }
    int saveorder()
    {
        if (ob.checkorder(modelCu.customerID, 0) > 0)
        {
            return 9999;
        }
        orders.orderStatus = "待确认";
        orders.customerID = modelCu.customerID;
        orders.customerCode = modelCu.customerCode;
        orders.customerName = this.Label23.Text;
        orders.orderDate = DateTime.Now;
        orders.personSex = this.Label24.Text;
        orders.personAge = int.Parse(this.Label26.Text);
        orders.personIDcard = this.Label28.Text;
        orders.personMobile = this.Label30.Text;
        orders.personPrivateEmail = this.Label32.Text;
        orders.personCompany = modelCu.customerCompany;
        orders.personMarriageStatus = this.Label38.Text;
        orders.personAddress = this.Label40.Text;
        orders.examDate = DateTime.Parse(this.Label42.Text);
        
        if (this.Label48.Text.Contains("爱康国宾"))
        {
            orders.examSupplier = "爱康国宾";
            //orders.cardNumber = eb.getcardnum(modelCu.customerID, "爱康国宾"); 
        }
        else if (this.Label48.Text.Contains("美年大健康"))
        {
            orders.examSupplier = "美年大健康";
        }
        else if (this.Label48.Text.Contains("慈铭体检"))
        {
            orders.examSupplier = "慈铭体检";
        }
        orders.examBranch = this.Label48.Text;
        orders.examhosip = ViewState["hospid"].ToString();
        orders.examPackage = modelCu.customerTel;//这字段存员工绑定的套餐
        //orders.examUpPkg = this.Label52.Text;
        //orders.examTotalFee = double.Parse(this.Label54.Text);
        //orders.examBill = double.Parse(this.Label56.Text);
        //orders.examInfo = this.Label58.Text;
            if (Session["htai"].ToString() == "htai")
            {
                orders.examWorkNo = Session["empName"].ToString();
                orders.Msg = "用户后台下单。";
            }
        
        else
        {
            orders.Msg = "用户前台下单。";
        }
      
        if (ViewState["branchtype"].ToString() != "网络")
        {
            orders.Msg = "非网络预约门店。";
        }
        else
        {
            orders.Msg = "网络预约情况：";
        }

        //判断是否已经下单
        //DataTable dtis = ob.Select("select * from tab_orders where customerID='" + modelCu.customerID + "' and relativeID=0  and ReportType<>'商城' and orderStatus<>'已取消' and orderStatus<>'已完成'");
        //if(dtis.Rows.Count>0)
        //{
        //    return 0;
        //}



        int ordernum = ob.Add(orders);
        //入职体检绑定的套餐没有价格
        //下单成功后减去客户的budget,同时更新客户的状态
        //if (ViewState["doubleprice"] != null && ViewState["doubleprice"].ToString() != "")
        //{
        //    double price = double.Parse(ViewState["doubleprice"].ToString());
        //    double budget = double.Parse(ViewState["doublebudget"].ToString()) - Cb.getbalance(modelCu.customerID);
        //    if (budget < price)
        //    {
        //        modelCu.customerBudget = 0;
        //        double oi = budget + Cb.getbalance(modelCu.customerID) - price;
        //        modelCu.customerBalance = oi > 0 ? oi : 0;
        //    }
        //    else
        //        modelCu.customerBudget = budget - price;
        //    modelCu.customerorderstatus = orders.orderStatus;
        //}
        //Cb.update(modelCu);

        //supplierpackagecode = makepackagecode();

        //orders.orderStatus = "已提交";
        if (orders.examSupplier != "美年大健康" && ViewState["branchtype"].ToString() == "网络")
        {
            if (ViewState["errormsg"] == null || ViewState["errormsg"].ToString() == "")
            {
                ViewState["errormsg"] = "";
                if (!submittosupplier(ordernum))
                {
                    //orders.Msg += "\n网络日期选择成功，网络提交失败，转人工预约！ (error:" + ViewState["errormsg"].ToString() + ")";
                    orders.Msg += "\n网络日期选择成功，网络提交失败，转人工预约！\n";
                }
                else
                {
                   orders.orderStatus = "约检成功";
                    
                    orders.Msg += "网络预约成功";
                }
            }
            else
            {
                orders.Msg = "供应商网络出错，转人工预约！ (error:" + ViewState["errormsg"].ToString() + ")";
            }
        }
        orders.orderID = ordernum;
        ob.Update(orders);
        return ordernum;
    }
    bool submittosupplier(int ordernum)
    {
        string s;



        if (this.Label48.Text.Contains("爱康国宾"))
        {
            ikm.cardnumber = eb.getcardnum(modelCu.customerID, "爱康国宾");
            ikm.regdate = this.Label42.Text;
            if (false)
            {
                //ikm.packagecode = this.CheckBoxList1.SelectedValue.Split(',')[1];
            }
            else
            {
                ikm.packagecode = orders.examPackage;
            }
            ikm.hospid = ViewState["hospid"].ToString();
            ikm.name = this.Label23.Text;
            ikm.sex = this.Label24.Text == (string)GetGlobalResourceObject("GResource", "male") ? "1" : "0";
            ikm.married = this.Label38.Text == (string)GetGlobalResourceObject("GResource", "married") ? "1" : "0";
            //ikm.contacttel = this.Label30.Text;
            ikm.contacttel = "18017588993";
            ikm.idnumber = this.Label28.Text;
            ikm.reportaddress = orders.personAddress;
            ikm.thirdnum = ordernum.ToString();


            s = iks.AddOrder(ikm);
            orders.Msg += s;
            JavaScriptSerializer jss = new JavaScriptSerializer();
            Dictionary<string, object> json = (Dictionary<string, object>)jss.DeserializeObject(s);
            object value;
            if (json.TryGetValue("code", out value) && value.ToString() == "1")
            {
                json.TryGetValue("message", out value);
                orders.supplierOrderID = value.ToString().Split('|')[0];
                orders.cardNumber = ikm.cardnumber;
                return true;
            }
            else
            {
                ViewState["errormsg"] = s;
                return false;
            }

        }
        else if (this.Label48.Text.Contains("美年大健康"))
        {
            return false;
            HealthUser mUser = new HealthUser
            {
                Cid = modelCu.customerCode,	//员工号
                Dwdm = modelCu.customerCompanycode,	//单位代码
                Crsq = DOB,	//出生日期
                Email = this.Label32.Text,	//邮件
                Dept1 = "",	//部门1
                Dept2 = string.Empty, 	//部门2
                Djremark = "[标记:" + modelCu.customerID +
                "][网址：http://www.medi-plus.cn/admin/login.aspx]" +
                "[纸质报告寄送地址:" + orders.personAddress + "]",	//到检备注 预约号+网址 我方工作人员到该网址更新到检状态
                Factory = ViewState["hospid"].ToString(),	//体检门店
                Fgs = string.Empty, 	//分公司
                IdCard = this.Label28.Text,	//身份证号
                JxreMark = "员工绑定套餐",	// 加选项备注 如加选项目名称，价格，挂帐还是自付费
                MaritalStatus = this.Label38.Text == (string)GetGlobalResourceObject("GResource", "married") ? "1" : "0", 	//婚姻状况 1为已婚 0 未婚
                //mPhone = this.Label30.Text,	//电话
                mPhone = "18017588993",
                Name = this.Label23.Text,	//姓名

                Package = orders.examPackage, 	//套餐
                TcName = orders.examPackage,
                Remark = string.Empty,	//备注
                Sex = this.Label24.Text == (string)GetGlobalResourceObject("GResource", "male") ? "1" : "0", 	//性别 1为男性 0 为女性
                YYSJ = this.Label42.Text//预约日期
            };

            s = mns.AddOrder(mUser);
            orders.Msg += s;
            if (s == "成功")
            {
                return true;
            }
            else
            {
                ViewState["errormsg"] = s;
                return false;
            }

        }
        return false;
    }

    protected void com_Province_SelectedIndexChanged(object sender, EventArgs e)
    {
        //this.DropDownList4.Items.Clear();
        rc.com_Province_SelectedIndexChanged(false, modelCu.customerCompany, this.com_Province, this.com_City);
        rc.fillbindsupplier(modelCu, RadioButtonList2, com_Province, com_City);
    }
    protected void com_City_SelectedIndexChanged(object sender, EventArgs e)
    {
        //this.DropDownList4.Items.Clear();
        rc.fillbindsupplier(modelCu, RadioButtonList2, com_Province, com_City);
    }
}


